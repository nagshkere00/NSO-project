---

- hosts: all
  gather_facts: yes
  become: yes
    
  tasks:
    - name: apt update
      apt:
        update_cache: true

- name: Configuring HAproxy loadbalancer
  hosts: HAproxy
  become: yes
  
  tasks:

    
    - name : sudo wait
      become: yes
      shell: while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 5; done;

    - name: Installing HAproxy
      apt:
        name: haproxy
        state: present
        update_cache: true
      
    - name: Installing keepalived
      apt:
        name: keepalived
        state: present
        update_cache: true

    - name: sudo sysctl -w net.ipv4.ip_nonlocal_bind=1
      become: yes
      shell: sysctl -w net.ipv4.ip_nonlocal_bind=1

    - name: gather server ip addresses
      setup:
            filter: ansible_default_ipv4.address     
         
    
    - name: copy files haproxy.cfg
      template:
        src: haproxy.cfg.j2
        dest: "/etc/haproxy/haproxy.cfg"
      notify:
        - restart haproxy

    

    - name: install nginx, snmp, snmp-mibs-downloader
      apt: 
        update_cache: yes
        name: [ 'nginx', 'snmp', 'snmp-mibs-downloader' ] 
        state: latest

    - name: copy nginx config files
      template:
         src: nginx.conf.j2
         dest: "/etc/nginx/nginx.conf"

    - name: nginx start
      service:
        name: nginx
        state: restarted

  handlers:

    - name: restart haproxy
      service:
       name: haproxy
       state: restarted

    - name: restart keepalived
      service:
        name: keepalived
        state: restarted

- hosts: primary_proxy
  become: yes
  vars:
    host_name: "{{ inventory_hostname }}"
    node_state: MASTER
    node_priority: 101
    virtual_ip: "{{ lookup('file', './vipaddr') }}"
  tasks:
    - name: configure keepalived
      template:
        src: keepalived.conf.j2
        dest: /etc/keepalived/keepalived.conf


- hosts: backup_proxy
  become: yes
  vars:
    host_name: "{{ inventory_hostname }}"
    node_state: BACKUP
    node_priority: 100
    virtual_ip: "{{ lookup('file', './vipaddr') }}"
  tasks:
    - name: configure keepalived
      template:
        src: keepalived.conf.j2
        dest: /etc/keepalived/keepalived.conf
    
- name: Restart Keepalived
  hosts: HAproxy
  become: yes
  tasks:
    - name: Ensure Keepalived service is running
      systemd:
        name: keepalived
        enabled: yes

    - name: restart keepalived
      service:
        name: keepalived
        state: restarted
        
    - name: start keepalived
      service:
        name: keepalived
        state: started

- hosts: webservers
  become: yes
  tasks:
    - name: install pip
      apt:
        name: python3-pip
        state: present
    
    - name: install flask
      pip:
        executable: pip3
        name: flask
        state: latest
    - name: install gunicorn
      pip:
        executable: pip3
        name: gunicorn
        state: latest

    - name: createnew directory
      file:
              path: "/home/flask-app/"
              state: directory

    - name: copy app.py to webservers
      template:
        src: "service.py"
        dest: "/home/flask-app/app.py"


    - name: start flask app
      shell: |
        cd /home/flask-app/
        gunicorn --bind 0.0.0.0:5000 app:app&  

    - name: install snmpd
      apt:
              name: snmpd
              state: latest
    
    - name: cpy snmpd conf file
      template:
              src: snmpd.conf.j2
              dest: "/etc/snmp/snmpd.conf"
    - name: run snmpd
      service:
              name: snmpd
              state: restarted    
              

- name: Install Grafana and prometheus on bastion
  hosts: bastion
  gather_facts: true
  become: true
  tasks:
    - name: Update apt repo and cache on all Ubuntu box
      apt:
        update_cache: yes
        force_apt_get: yes
        cache_valid_time: 3600

    - name: Upgrade all packages on servers
      apt:
        upgrade: dist
        force_apt_get: yes

    - name: Install required packages
      apt:
        name:
          - gnupg2
          - curl
          - software-properties-common

    - name: Add the Grafana GPG key
      shell: |
        curl https://packages.grafana.com/gpg.key | sudo apt-key add -
        add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
      args:
        warn: no

    - name: Install the grafana package
      apt:
        name: grafana
        state: present
        update_cache: yes
      notify:
        - Start grafana
        - Enable grafana

    - name: Ensure Nginx is installed
      apt:
        name: nginx
        state: present
      notify: Start and Enable Nginx

    - name: Create grafana nginx config file
      copy:
          dest: /etc/nginx/conf.d/grafana.conf
          mode: 0755
          content: |
            server {
              listen 80;
              server_tokens off;
              client_max_body_size 10M;
              server_name grafana1.citizix.com;

              ignore_invalid_headers off;

              if ($host !~* ^(grafana1.citizix.com)$ ) {
                  return 444;
              }

              location / {
                  send_timeout            600;
                  proxy_read_timeout      600;
                  proxy_send_timeout      600;
                  proxy_connect_timeout   600;
                  proxy_redirect          off;
                  proxy_set_header        Host $host;
                  proxy_set_header        X-Real-IP $remote_addr;
                  proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header        X-Forwarded-Host $server_name;
                  proxy_set_header        X-Forwarded-Proto $scheme;
                  proxy_pass http://127.0.0.1:3000;
              }
            }
    - name: Install Prometheus
      apt:
        name: prometheus
        state: present
        update_cache: yes

    - name: Start Prometheus service
      service:
        name: prometheus
        state: started
        enabled: true

  handlers:
    - name: Start grafana
      systemd:
        name: grafana-server
        state: started

    - name: Enable grafana
      systemd:
        name: grafana-server
        enabled: yes

    - name: Start and Enable Nginx
      systemd:
        name: nginx
        state: started
        enabled: yes

- hosts: all
  become: True
  become_user: root
  vars:
    node_exporter_version: 1.1.2
  tasks:
    - name: download node exporter
      get_url:
        url: https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz
        dest: /tmp
    - name: unarchive node exporter
      unarchive:
        remote_src: yes
        src: /tmp/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz
        dest: /tmp
    - name: move node exporter to /usr/local/bin
      copy:
        src: /tmp/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter
        dest: /usr/local/bin/node_exporter
        remote_src: yes
        owner: root
        group: root
        mode: 0755
    - name: install unit file to systemd
      template:
        src: node_exporter.service.j2
        dest: /etc/systemd/system/node_exporter.service
        owner: root
        group: root
        mode: 0600
    - name: configure systemd to use service
      systemd:
        daemon_reload: yes
        enabled: yes
        state: started
        name: node_exporter.service
